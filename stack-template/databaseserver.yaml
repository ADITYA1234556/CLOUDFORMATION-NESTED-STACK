Parameters:
  RoleTempName:
    Description: Name of the s3 role iam instance profile from cicds3role.yml
    Type: String
    Default: cicds3role #name of the s3 role template so that this template will fetch the output of the s3 role template
  appStackName:
    Description: Name of the base stack with all infra resources
    Type: String
    Default: app01qa
  JenkinsStackName:
    Type: String
    Description: Will take the output of Jenkins security group id from jenkins.yml template
    Default: Jenkins
  MyIP:
    Type: String
  KeyName:
    Type: String
  InstanceType:
    Type: String
    Default: t3.small
Mappings:
  AmiRegionMap:
    eu-west-2:
      AMI: ami-0aa938b5c246ef111
    us-west-1:
      AMI: ami-059d737350291b1aa
    eu-west-1:
      AMI: ami-0c3a915e3f3aa0e0d
    us-west-2:
      AMI: ami-033067239f2d2bfbc
Resources:
  DB01qaInst:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap
        - AmiRegionMap
        - !Ref AWS::Region #will fetch the region
        - AMI #KEY NAME INSIDE Mappings[AmiRegionMap][EU-WEST-2][AMI]
      Tags:
        - Key: "Name"
          Value: !Join
            - "-"
            - - "database in "
              - !Ref AWS::Region
      SecurityGroupIds:
        - !Ref cloudformsgdb
      IamInstanceProfile:
        Fn::ImportValue: !Sub "${RoleTempName}-cloudS3RoleProfileName"
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            DATABASE_PASS='admin123'
            yum update -y
            yum install epel-release -y
            yum install mariadb-server -y
            yum install wget git unzip -y

            #mysql_secure_installation
            sed -i 's/^127.0.0.1/0.0.0.0/' /etc/my.cnf

            # starting & enabling mariadb-server
            systemctl start mariadb
            systemctl enable mariadb

            #restore the dump file for the application
            cd /tmp/
            wget https://raw.githubusercontent.com/devopshydclub/vprofile-repo/vp-rem/src/main/resources/db_backup.sql
            mysqladmin -u root password "$DATABASE_PASS"
            mysql -u root -p"$DATABASE_PASS" -e "UPDATE mysql.user SET Password=PASSWORD('$DATABASE_PASS') WHERE User='root'"
            mysql -u root -p"$DATABASE_PASS" -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')"
            mysql -u root -p"$DATABASE_PASS" -e "DELETE FROM mysql.user WHERE User=''"
            mysql -u root -p"$DATABASE_PASS" -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%'"
            mysql -u root -p"$DATABASE_PASS" -e "FLUSH PRIVILEGES"
            mysql -u root -p"$DATABASE_PASS" -e "create database accounts"
            mysql -u root -p"$DATABASE_PASS" -e "grant all privileges on accounts.* TO 'admin'@'localhost' identified by 'admin123'"
            mysql -u root -p"$DATABASE_PASS" -e "grant all privileges on accounts.* TO 'admin'@'%' identified by 'admin123'"
            mysql -u root -p"$DATABASE_PASS" accounts < /tmp/db_backup.sql
            mysql -u root -p"$DATABASE_PASS" -e "FLUSH PRIVILEGES"

            # Restart mariadb-server
            systemctl restart mariadb
            # SETUP MEMCACHE
            yum install memcached -y
            systemctl start memcached
            systemctl enable memcached
            systemctl status memcached
            memcached -p 11211 -U 11111 -u memcached -d
            sleep 30
            yum install socat -y
            yum install wget -y
            wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.10/rabbitmq-server-3.6.10-1.el7.noarch.rpm
            rpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc
            yum update
            rpm -Uvh rabbitmq-server-3.6.10-1.el7.noarch.rpm
            systemctl start rabbitmq-server
            systemctl enable rabbitmq-server
            systemctl status rabbitmq-server
            echo "[{rabbit, [{loopback_users, []}]}]." > /etc/rabbitmq/rabbitmq.config
            rabbitmqctl add_user test test
            rabbitmqctl set_user_tags test administrator
            systemctl restart rabbitmq-server
  cloudformsgdb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: cloudformsgdb
      GroupDescription: Allow SSH & HTTP from myip
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref MyIP
  dbSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
          - cloudformsgdb
          - GroupId
      IpProtocol: -1
      SourceSecurityGroupId:
        Fn::ImportValue:
          Fn::Sub: "${appStackName}-SGID"